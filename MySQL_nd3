Paprasti uždaviniai:
Rasti:
* kuriame departamente dabar dirba daugiausiai moterų -> departamento pavadinimas ir moterų skaičius
Sprendimas A (visos moterys, neziurint kada dirbo):

   SELECT  de.dept_no, d.dept_name, count(d.dept_no) Moteru
   FROM
    employees.employees e
JOIN employees.dept_emp de
	ON (e.emp_no = de.emp_no) 
JOIN employees.departments d
	ON (de.dept_no = d.dept_no)
    WHERE
  gender = 'F'
GROUP BY d.dept_name  
ORDER BY count(d.dept_no) DESC
LIMIT 10 ;

d005	Development		34258
d004	Production		29549
d007	Sales			20854
d009	Customer Service	9448
d008	Research		8439
d006	Quality Management	8078
d001	Marketing		8037
d003	Human Resources		7075
d002	Finance			7015


Sprendimas B (dabar dirbancios moterys):

   SELECT  de.dept_no, d.dept_name, count(d.dept_no) Moteru
   FROM
    employees.employees e
JOIN employees.dept_emp de
	ON (e.emp_no = de.emp_no) 
JOIN employees.departments d
	ON (de.dept_no = d.dept_no)
    WHERE
  gender = 'F' AND de.to_date = '9999-01-01'
GROUP BY d.dept_name  
ORDER BY count(d.dept_no) DESC
LIMIT 10 ;

d005	Development		24533
d004	Production		21393
d007	Sales			14999
d009	Customer Service	7007
d008	Research		6181
d006	Quality Management	5872
d001	Marketing		5864
d003	Human Resources		5147
d002	Finance			5014


* kuriame departamente vis dar dirba vyriausias darbuotojas -> departamento pavadinimas, darbuotojo vardas, pavarde
Sprendimas:

SELECT  d.dept_name Departamentas, e.first_name Vardas, e.last_name Pavarde, e.birth_date Gimes
   FROM
    employees.employees e
JOIN 
employees.dept_emp de
	ON (e.emp_no = de.emp_no) 
    
JOIN employees.departments d
	ON (de.dept_no = d.dept_no)
    WHERE
  de.to_date = '9999-01-01'
ORDER BY e.birth_date ASC
LIMIT 10;

Production		Moni	Decaestecker	1952-02-01
Development		Kiyokazu	Whitcomb	1952-02-01
Customer Service	Supot	Remmele		1952-02-01
Human Resources		Jouni	Pocchiola	1952-02-01
Production		Ronghao	Schaad		1952-02-01
Research		Piyush	Erbe		1952-02-02
Production		Kristof	Ranft		1952-02-02
Development		Takahito	Maierhofer	1952-02-02
Production		Fan	Przulj		1952-02-02
Development		Tadahiro	Delgrange	1952-02-02


SELECT  d.dept_name Departamentas, e.first_name Vardas, e.last_name Pavarde, s.salary Atlyginimas, s.from_date 'Data'
   FROM
    employees.employees e
JOIN employees.dept_emp de
	ON (e.emp_no = de.emp_no) 
JOIN employees.departments d
	ON (de.dept_no = d.dept_no)
JOIN employees.salaries s
	ON (e.emp_no = s.emp_no)
    WHERE
  s.to_date = '9999-01-01'  ---- yra niuansu
  ORDER BY s.salary DESC
LIMIT 10;

Sales	Tokuyasu	Pesch	158220	2002-03-22
Sales	Honesty	Mukaidono	156286	2001-08-04
Sales	Xiahua	Whitcomb	155709	2002-07-14
Sales	Sanjai	Luders		155513	2002-04-11
Sales	Tsutomu	Alameldin	155190	2002-02-11
Sales	Willard	Baca		154459	2002-02-22
Sales	Lidong	Meriste		154376	2002-05-05
Sales	Charmane Griswold	153715	2001-10-09
Sales	Weijing	Chenoweth	152710	2001-10-04
Sales	Weicheng Hatcliff	152687	2002-04-08


* darbuotojus kurie niekad nebuvo departamento vadovais -> vardas, pavarde

Sprendimas paprsatuoju budu:

-- SELECT first_name, last_name
SELECT COUNT(*)
FROM employees
WHERE emp_no NOT IN (SELECT emp_no FROM dept_manager) 
-- ORDER BY emp_no;
   
Ats:   COUNT =  300000

Sprendimas su LEFT JOIN

-- SELECT first_name, last_name
SELECT COUNT(e.emp_no)
FROM employees e
LEFT JOIN dept_manager dm
ON e.emp_no = dm.emp_no
WHERE dm.emp_no IS NULL 
-- ORDER BY e.emp_no;

Ats:   COUNT =  300000

LEFT ir RIGHT JOIN: 
https://stackoverflow.com/questions/3308122/how-do-i-decide-when-to-use-right-joins-left-joins-or-inner-joins-or-how-to-dete/3308153#3308153




Sudėtingas *****:
Tarkime turime lentele maršrutai su trimis laukais (mazgas nuo, mazgas iki ir atstumas tarp mazgu):
nuo | iki | atstumas
----+-----+---------
A   | B   | 10
A   | C   | 15
B   | D   | 7
B   | E   | 9
D   | F   | 10
C   | F   | 50
D   | G   | 8
C   | G   | 11
suraskite galimus maršrutus iš A į F
suraskite trumpiausią maršutą iš A į F

algoritmas:
http://www.artfulsoftware.com/infotree/qrytip.php?id=766&m=0
https://www.percona.com/blog/2020/02/13/introduction-to-mysql-8-0-recursive-common-table-expression-part-2/


CREATE TABLE marsrutai (
    nuo CHAR(1),
    iki CHAR(1),
    atstumas INT
    );
    
    INSERT marsrutai VALUES
    ('A', 'B', 10), 
    ('A', 'C', 15),
    ('B', 'D', 7),
    ('B', 'E', 9),
    ('D', 'F', 10),
    ('C', 'F', 50),
    ('D', 'G', 8),
    ('C', 'G', 11);
    
WITH RECURSIVE keliai (cur_path, cur_dest, tot_distance) AS (     -- susikuriam laikina lentele "keliai"
          SELECT CAST(nuo AS CHAR(20)), CAST(nuo AS CHAR(20)), 0 
          FROM marsrutai 
          WHERE nuo = 'A'   
          UNION     
          SELECT CONCAT(keliai.cur_path, ' -> ', marsrutai.iki), marsrutai.iki, keliai.tot_distance+marsrutai.atstumas        
          FROM keliai, marsrutai        
          WHERE keliai.cur_dest = marsrutai.nuo
           AND  NOT FIND_IN_SET(marsrutai.iki, REPLACE(keliai.cur_path,' -> ',',') ) ) 
       SELECT cur_path Kelias, cur_dest Iki, tot_distance Atstumas FROM keliai 
       WHERE cur_dest = 'F'        -- galima isjungti ir matysim visus kelius tarp mazgu
     -- ORDER BY tot_distance ASC LIMIT 1 
     -- ijungiam sia eilute jei norime tik trumpiausio kelio
       ;

Atsakymas:

A -> C -> F	F	65
A -> B -> D -> F	F	27


---------------------------------------
/*
1) Suraskite kokiu metų laiku (pavasarį, vasarą, rudenį ar žiemą) įdarbinta daugiausia žmonių
*/
SELECT CASE 
	WHEN MONTH(hire_date) BETWEEN 3 AND 5 THEN 'pavasari' 
	WHEN MONTH(hire_date) BETWEEN 6 AND 8 THEN 'vasara' 
	WHEN MONTH(hire_date) BETWEEN 9 AND 11 THEN 'rudeni' 
	ELSE 'ziema' END AS metu_laikas, 
COUNT(hire_date) AS kiekis 
FROM employees 
GROUP BY metu_laikas 
ORDER BY kiekis DESC;
WITH zmones(season, count) AS (
	SELECT 'winter', (SELECT COUNT(hire_date) FROM employees WHERE hire_date REGEXP '^....-(12|01|02)-..$')
	UNION ALL
	SELECT 'spring', (SELECT COUNT(hire_date) FROM employees WHERE hire_date REGEXP '-(03|04|05)-') -- 2020-03-25
	UNION ALL 
	SELECT 'summer', (SELECT COUNT(hire_date) FROM employees WHERE MONTH(hire_date) IN (6,7,8))
	UNION ALL 
	SELECT 'autumn', (SELECT COUNT(hire_date) FROM employees WHERE MONTH(hire_date) = 9 OR MONTH(hire_date) = 10 OR MONTH(hire_date) = 11)
	)
SELECT * FROM zmones ORDER BY count DESC;	
/*
2) Išveskite tris daugiausia progresavusius atlyginimo prasme žmones, 
t.y. kurių pirmas ir paskutinis atlyginimai daugiausia skyrėsi
- rasti datas kada zmogus gavo pirma ir paskutini atlyginimus
- zmogus, pirmas, paskutinis
*/
SELECT A.*, s2.salary AS first_salary, s3.salary AS last_salary,
	s3.salary - s2.salary AS diff_salary
FROM
	(SELECT emp_no, MIN(from_date) AS first_from_date, MAX(from_date) AS last_from_date FROM salaries
	GROUP BY emp_no) A
JOIN salaries s2 ON s2.emp_no = A.emp_no AND s2.from_date = A.first_from_date 
JOIN salaries s3 ON s3.emp_no = A.emp_no AND s3.from_date = A.last_from_date 
ORDER BY diff_salary DESC
LIMIT 10;
WITH sal (emp,s1,s2) AS (
	SELECT emp_no, 
		(SELECT salary FROM salaries WHERE salaries.emp_no = SOD.emp_no ORDER BY salaries.from_date LIMIT 1) AS s1, 
        (SELECT salary FROM salaries WHERE salaries.emp_no = SOD.emp_no ORDER BY salaries.from_date DESC LIMIT 1) AS s2 
	FROM salaries SOD 
    ) 
SELECT emp, (s2-s1) AS dis 
FROM sal 
ORDER BY dis DESC 
LIMIT 1;
SELECT DISTINCT emp_no,
	(SELECT salary FROM salaries WHERE salaries.emp_no = SOD.emp_no order by salaries.from_date limit 1) AS s1, 
	(SELECT salary FROM salaries WHERE salaries.emp_no = SOD.emp_no order by salaries.from_date desc limit 1) AS s2 
FROM salaries SOD 
ORDER BY emp_no
LIMIT 20;
/*
3) Raskite žmogų kurio vienas iš atlyginimo pakeitimų buvo didžiausias 
(pats pakeitimas buvo didžiausias, t.y. pvz anktesnis buvo 100, o dabar 150 
 tai tada pakeitimas 50)
 - [zmogus1]  d1  [d2] salary1
 - [zmogus1] [d2]  d3 salary2
 =  zmogus1 d1 d2 d3 salary1 salary2
*/
SELECT 
    a.emp_no,
    a.from_date,
    a.salary AS salary_old,
    b.from_date,
    b.salary AS salary_new,
    (b.salary - a.salary) AS skirtumas
FROM salaries a
JOIN salaries b ON b.emp_no = a.emp_no AND a.to_date = b.from_date 
ORDER BY skirtumas DESC
LIMIT 10;
/* 
	View'ai 
*/
SELECT * FROM current_dept_emp LIMIT 10;
CREATE VIEW current_dept_emp AS 
	SELECT l.emp_no AS emp_no, 
		d.dept_no AS dept_no, 
		l.from_date AS from_date,
		l.to_date AS to_date 
    FROM dept_emp d 
    JOIN dept_emp_latest_date l 
		ON (d.emp_no = l.emp_no) AND 
			(d.from_date = l.from_date) AND 
            (l.to_date = d.to_date);
